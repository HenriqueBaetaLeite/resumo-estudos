// A propriedade flex-direction √© aquela que define a dire√ß√£o dos flex items e modifica quem √© o Main Axis . Por padr√£o essa propriedade √© row (linha), com isso os elementos ficam um ao lado do outro. Os outros valores que essa propriedade possui s√£o o row-reverse , os itens ficam em linha reversa, o column , onde os itens ficam em uma √∫nica coluna, um embaixo do outro, e o column-reverse , em que os itens tamb√©m ficam um embaixo do outro, por√©m em ordem reversa.
// J√° a propriedade flex-wrap define se os itens devem quebrar ou n√£o a linha, sendo que por padr√£o esse propriedade √© nowrap , ou seja, os itens n√£o quebram a linha. Os valores que fazem com que a linha quebra s√£o o wrap , que quebra a linha, e o wrap-reverse , que quebra a linha na dire√ß√£o contr√°ria.
// Por sua vez o flex-flow √© um atalho para as propriedades flex-direction e flex-wrap , o primeiro valor que recebe √© o do flex-direction e o segundo o do flex-wrap .
// Vamos colocar em pr√°tica os novos conhecimentos adquiridos? Copie o c√≥digo abaixo e realize os exerc√≠cios de fixa√ß√£o propostos.
// Copiar
// <!DOCTYPE html>
// <html lang="pt">
//   <head>
//     <meta charset="UTF-8">
//     <meta name="viewport" content="width=device-width, initial-scale=1.0">
//     <title>Flexbox - Flex Flow</title>
//     <style>
//       .box {
//         color: #9069EF;
//         background-color: rgb(243, 243, 243);
//         border: 2px solid #232525;
//         font-size: 50px;
//         height: 60px;
//         margin: 10px 5px;
//         text-align: center;
//         width: 30%;
//       }

//       .box-container {
//         background-color: #0fa36b;
//         display: flex;
//         /* ADICIONE AQUI SEUS TESTES */
//       }
//     </style>

//   </head>
//   <body>
//     <div class="box-container">
//       <div class="box">1</div>
//       <div class="box">2</div>
//       <div class="box">3</div>
//       <div class="box">4</div>
//       <div class="box">5</div>
//     </div>
//   </body>
// </html>
// Teste as possibilidades ( row , column , row-reverse e column-reverse ) para a propriedade flex-direction .
// Teste as possibilidades ( wrap e nowrap ) para a propriedade flex-wrap .
// Teste as possibilidades para a propriedade flex-flow .

//

// O justify-content alinha os flex items no container de acordo com a dire√ß√£o. Essa propriedade possui os valores flex-start que alinha os itens ao in√≠cio do container, flex-end que alinha os itens ao final do container, center que alinha os itens ao centro do container, space-between cria um espa√ßamento igual entre os elementos, mantendo o primeiro grudado no in√≠cio e o √∫ltimo no final, e space-around tamb√©m cria um espa√ßamento entre os elementos, mas os espa√ßamentos do meio s√£o duas vezes maiores que o inicial e final.
// J√° a propriedade align-items alinha os flex items de acordo com o eixo transversal (cross-axis). Os valores que essa propriedade aceita s√£o stretch , que √© seu valor padr√£o e faz com os flex items cres√ßam igualmente, flex-start alinha os itens ao in√≠cio, flex-end alinha os itens ao final, center alinha os itens ao centro e baseline que alinha os itens de acordo com a linha base da tipografia.
// Por fim, a propriedade align-content alinha as linhas do container em rela√ß√£o ao eixo transversal (cross-axis), sendo que essa propriedade s√≥ funciona caso haja mais de uma linha de flex items. As op√ß√µes de alinhamento que o align-content apresenta s√£o stretch , seu valor padr√£o que faz com que os flex items cres√ßam igualmente na vertical, flex-start , alinha todas as linhas de itens ao in√≠cio, flex-end , que alinha todas as linhas de itens ao final, center que alinha todas as linhas ao centro, space-between , que cria um espa√ßamento igual entre as linhas, mantendo a primeira grudada no topo e a √∫ltima no bottom, e space-around , que tamb√©m cria um espa√ßamento entre as linhas, mas os espa√ßamentos do meio s√£o duas vezes maiores que o top e o bottom.
// Interessante quantas possibilidades para manipular o posicionamento de elementos o flex-box nos traz, n√£o √©? Copie o c√≥digo abaixo e teste algumas destas possibilidades para fixar seu conhecimento.
// Utilizando o c√≥digo abaixo, teste as possibilidades ( center , flex-start , flex-end , space-around e space-between ) para a propriedade justify-content .
// Copiar
// <!DOCTYPE html>
// <html lang="pt">
//   <head>
//     <meta charset="UTF-8">
//     <meta name="viewport" content="width=device-width, initial-scale=1.0">
//     <title>Flexbox - Justify Content</title>
//     <style>
//       .box {
//         color: #9069EF;
//         background-color: rgb(243, 243, 243);
//         border: 2px solid #232525;
//         font-size: 50px;
//         height: 60px;
//         margin: 10px 5px;
//         text-align: center;
//         width: 20%;
//       }

//       .box-container {
//         background-color: #0fa36b;
//         display: flex;
//         /* ADICIONE AQUI SEUS TESTES */
//       }
//     </style>

//   </head>
//   <body>
//     <div class="box-container">
//       <div class="box">1</div>
//       <div class="box">2</div>
//       <div class="box">3</div>
//     </div>
//   </body>
// </html>
// Teste as possibilidades ( center , flex-start , flex-end , stretch e baseline ) para a propriedade align-items . N√£o se esque√ßa de copiar o c√≥digo abaixo! üòâ
// Copiar
// <!DOCTYPE html>
// <html lang="pt">
//   <head>
//     <meta charset="UTF-8">
//     <meta name="viewport" content="width=device-width, initial-scale=1.0">
//     <title>Flexbox - Align Items</title>
//     <style>
//       .box-one {
//         color: #9069EF;
//         background-color: rgb(243, 243, 243);
//         border: 2px solid #232525;
//         font-size: 70px;
//         height: 80px;
//         margin: 10px 5px;
//         text-align: center;
//         width: 50px;
//       }

//       .box-two {
//         color: #9069EF;
//         background-color: rgb(243, 243, 243);
//         border: 2px solid #232525;
//         font-size: 50px;
//         height: 60px;
//         margin: 10px 5px;
//         text-align: center;
//         width: 50px;
//       }

//       .box-three {
//         color: #9069EF;
//         background-color: rgb(243, 243, 243);
//         border: 2px solid #232525;
//         font-size: 30px;
//         margin: 10px 5px;
//         height: 50px;
//         text-align: center;
//         width: 50px;
//       }

//       .box-container {
//         background-color: #0fa36b;
//         display: flex;
//         /* ADICIONE AQUI SEUS TESTES */
//       }
//     </style>

//   </head>
//   <body>
//     <div class="box-container">
//       <div class="box-one">1</div>
//       <div class="box-two">2</div>
//       <div class="box-three">3</div>
//     </div>
//   </body>
// </html>
// Teste as possibilidades ( center , flex-start , flex-end , stretch , space-around e space-between ) para a propriedade align-content .
// Copiar
// <!DOCTYPE html>
// <html lang="pt">
//   <head>
//     <meta charset="UTF-8">
//     <meta name="viewport" content="width=device-width, initial-scale=1.0">
//     <title>Flexbox - Align Content</title>
//     <style>
//       .box {
//         color: #9069EF;
//         background-color: rgb(243, 243, 243);
//         border: 2px solid #232525;
//         font-size: 50px;
//         height: 60px;
//         margin: 10px 5px;
//         text-align: center;
//         width: 30%;
//       }

//       .box-container {
//         /* ADICIONE AQUI SEUS TESTES */
//         background-color: #0fa36b;
//         display: flex;
//         flex-wrap: wrap;
//         height: 600px;
//       }
//     </style>

//   </head>
//   <body>
//     <div class="box-container">
//       <div class="box">1</div>
//       <div class="box">2</div>
//       <div class="box">3</div>
//       <div class="box">4</div>
//       <div class="box">5</div>
//       <div class="box">6</div>
//       <div class="box">7</div>
//       <div class="box">8</div>
//       <div class="box">9</div>
//     </div>
//   </body>
// </html>

//

// EXERC√çCIOS

// Agora a pr√°tica
// Para os exerc√≠cios a seguir, utilize este playground para testar como as propriedades Flexbox influenciam a disposi√ß√£o dos elementos em um container . Existem outros playgrounds para Flexbox como este, e os links para eles est√£o nos Recursos adicionais .
// Como os exerc√≠cios ser√£o feitos na pr√≥pria plataforma, crie um diret√≥rio em seu reposit√≥rio para o site n√∫mero 1 (problema do sapo) e outro para o site n√∫mero 2 (problema das torres). Salve o CSS que voc√™ criar na plataforma colocando o n√∫mero do exerc√≠cio como o nome do arquivo, como nos exemplos abaixo:
// Para o exerc√≠cio n√∫mero 15 do site n√∫mero 1, o CSS deve ser salvo em exercises/6.4/1/15.css ;
// Para o exerc√≠cio n√∫mero 10 do site n√∫mero 2, o CSS deve ser salvo em exercises/6.4/2/10.css ;
// Para o exerc√≠cio n√∫mero 11 do site n√∫mero 2, o CSS deve ser salvo em exercises/6.4/2/11.css .
// Fa√ßa os exerc√≠cios de 14 a 24 neste site . O seu objetivo √© colocar os sapos em cima de suas respectivas folhas.
// Neste segundo link , complete os exerc√≠cios de 10 a 12 . Seu objetivo aqui √© posicionar as torres de defesa para que elas abatam os inimigos. Voc√™ ter√° de pensar qual √© a melhor posi√ß√£o para cada torre.
// (Opcional) Para finalizar, escolha alguns exerc√≠cios antigos como, por exemplo, o portf√≥lio ou at√© mesmo os projetos de HTML , CSS e JavaScript e estruture as p√°ginas utilizando Flexbox .
// https://the-echoplex.net/flexyboxes/
