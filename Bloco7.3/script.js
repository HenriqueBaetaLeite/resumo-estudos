// NodeJS Assert
// O m√≥dulo Assert √© uma ferramenta de aferi√ß√£o que permite testar express√µes.
// Esse m√≥dulo j√° vem instalado com o NodeJS . Podemos entender o assert como sendo
// uma express√£o booleana que ser√° sempre true , ao menos que haja uma falha.
// Por esse motivo, o assert n√£o dar√° feedback se o teste n√£o falhar.
// Se a express√£o assert √© avaliada com o valor 0 ou false , o teste falhar√° e
// o programa ser√° terminado. O assert possui v√°rios m√©todos para testar se o
// seu c√≥digo funciona como o esperado. Veremos nos exemplos a seguir alguns desses
// m√©todos. Esta √© a forma mais simples de se escrever testes.
// Acompanhe um exemplo do uso do m√≥dulo assert abaixo. Rode as express√µes
// separadamente, comentando a linha que n√£o ser√° executada para ver o resultado.

const assert = require('assert'); // Sintaxe para incluir o m√≥dulo assert

assert.strictEqual(50, 50); // Sem erros: 50 == 50
assert.strictEqual(50, 70); // AssertionError: 50 == 70
// Neste outro exemplo utilizamos o assert para testar o retorno esperado da
// fun√ß√£o division :

const assert = require('assert');

function division(x, y) {
  return x / y;
}

const expected = division(9, 3);

assert.strictEqual(expected, 3, 'Nove dividido por tr√™s √© igual a tr√™s');

// Os dois c√≥digos acima utilizam o m√©todo assert.strictEqual.
// Esse m√©todo compara o primeiro e o segundo par√¢metro utilizando o
// operador == . Se os valores forem diferentes, o teste falhar√° e ser√°
// mostrado um erro com a mensagem que est√° no terceiro par√¢metro, se houver
// (o terceiro par√¢metro √© opcional). N√£o deixe de provocar uma falha no teste para
// ver o resultado! Este m√©todo tem o mesmo resultado que a express√£o
// assert(expected == 3, 'Nove dividido por tr√™s √© igual a tr√™s') .
// A vantagem de se usar o m√©todo assert.strictEqual() neste contexto
// √© deixar mais clara a inten√ß√£o do teste. Entretanto, √© importante refor√ßar que
// o assert.strictEqual faz uma compara√ß√£o de valor com o operador == .
// Portanto, se voc√™ colocar o n√∫mero 3 dentro de aspas o
// teste assert.strictEqual(expected, '3', 'Nove dividido por tr√™s √© igual a tr√™s')
// ir√° passar pois o m√©todo .equal n√£o checa o tipo de valor que estamos
// comparando - nesse caso, '3' √© uma string . Assim sendo, prefira m√©todos
// que comparam se dois valores s√£o estritamente iguais, isto √©, valor e tipo.
// Como voc√™ ver√° nos pr√≥ximos exemplos, o .strictEqual e o .deepStrictEqual comparam
// os par√¢metros fornecidos utilizando o operador === . Experimente refazer o teste acima
// com o strictEqual e veja o que acontece quando passamos o '3' como par√¢metro
// para o assert.strictEqual() ! O seu teste ir√° quebrar, pois o resultado esperado
// √© um n√∫mero igual a 3.
// Alguns outros m√©todos do m√≥dulo assert que nos permite escrever testes s√£o:
// assert.strictEqual()
// assert.deepStrictEqual()
// assert.notStrictEqual()
// assert.ok()
// assert.fail()
// A lista de m√©todos dispon√≠veis, juntamente com a documenta√ß√£o de cada um, est√° aqui.
// Voc√™ ver√° que alguns m√©todos s√£o usados com mais frequ√™ncia que outros.
// Caso tenha interesse, voc√™ pode ver mais exemplos de testes e quando cada
// m√©todo √© utilizado aqui . √â importante ter em mente que alguns m√©todos s√£o
// bem similares, e se comportam da mesma forma quando o teste falha.
// A escolha de qual teste usar deve levar em considera√ß√£o n√£o apenas o resultado
// esperado, como tamb√©m a clareza transmitida com a express√£o utilizada no teste.

//

//

// Podemos combinar v√°rios m√©todos do assert quando escrevemos nossos testes.
// Isso pode ser muito √∫til para ampliar a cobertura do teste em casos de falhas! Observe:

const assert = require('assert');

function add(a, b) {
  return a + b;
}

const expected = add(1, 2);

assert.ok(expected === 3, 'Um mais dois √© igual a tr√™s'); // Checa se o primeiro argumento √© verdadeiro
assert.strictEqual(expected, 3, 'Um mais dois √© igual a tr√™s'); // Checa se o primeiro e segundo argumentos s√£o iguais em valor e tipo (===)
assert.notStrictEqual(expected, 4, 'Um mais dois √© igual a tr√™s (e n√£o quatro!)'); // Checa se o primeiro e segundo argumentos s√£o diferentes (!==)

// Lembre-se que a mensagem do erro aparece apenas quando o teste falha.
// Experimente alterar os par√¢metros de entrada da fun√ß√£o add e veja o resultado!
// √â poss√≠vel tamb√©m testar estruturas como arrays e objetos:

const assert = require('assert');

const list1 = [1, 2, 3, 4, 5];
const list2 = [1, 2, 3, 4, 5];

assert.deepStrictEqual(list1, list2, 'Erro: list1 e list2 n√£o s√£o estritamente iguais');

const person1 = { name: 'john', age: 21 };
const person2 = { name: 'john', age: 21 };

assert.deepStrictEqual(person1, person2, 'Erro: person1 e person2 n√£o s√£o estritamente iguais');

const person3 = { name: 'john', age: 19 };

assert.notDeepStrictEqual(person1, person3, 'Erro: os valores dos objetos s√£o estritamente iguais');

//

// Para que o teste falhe, experimente passar como segundo par√¢metro para o √∫ltimo
// teste o objeto person2 . Voc√™ ver√° que o teste ir√° falhar, pois ele espera que
// os valores dos objetos passados como argumento sejam diferentes.
// Pratique um pouco, escreva fun√ß√µes simples (soma, concatena√ß√£o de strings etc.) e
// crie testes utilizando os v√°rios m√©todos dispon√≠veis no m√≥dulo assert.
// Se precisar, consulte a tabela neste link com os m√©todos do assert mais utilizados!
// Testes unit√°rios e a melhoria no c√≥digo
// Um papel dos testes unit√°rios √© nos ajudar a implementar fun√ß√µes mais robustas.
// Veja, por exemplo, a fun√ß√£o que realiza a divis√£o utilizada no modelo anterior:

function division(x, y) {
  return x / y;
}

// O que acontece se criarmos o teste abaixo?

const assert = require('assert');

// declara√ß√£o da fun√ß√£o division, definida anteriormente...

assert.strictEqual(division(10, 2), 5); // OK
assert.strictEqual(division(10, 0), 0); // üí£

// O primeiro assert.strictEqual funciona e n√£o apresenta erro, mas
// o segundo deixa evidente uma fragilidade na implementa√ß√£o da fun√ß√£o division,
// pois n√£o poderia ser poss√≠vel realizar a divis√£o por 0. Nesse caso,
// devemos melhorar a implementa√ß√£o da fun√ß√£o division , a fim de n√£o termos mais
// esse estado inconsistente.

const assert = require('assert');

function division(x, y) {
  if (y === 0) throw new Error('parameter y must not be 0');
  return x / y;
}

assert.strictEqual(division(10, 2), 5); // OK
assert.throws(() => {
  division(10, 0);
}, /^Error: parameter y must not be 0$/); // OK

//

// Atualizamos o teste para refletir a mudan√ßa de implementa√ß√£o,
// ou seja, os testes unit√°rios tamb√©m nos ajudam a identificar casos
// especiais que podem levar nossas fun√ß√µes a estados inv√°lidos.

// Testando em pequenos passos
// O TDD: Test Driven Development , em tradu√ß√£o livre, o desenvolvimento orientado a
// testes , √© uma t√©cnica de desenvolvimento que, em certos cen√°rios, favorece a
// produtividade e a escrita de c√≥digos confi√°veis. Essa t√©cnica √© interessante porque
// ela ajuda a criar uma mente programadora orientada a testes , ainda que nem sempre
// escrever testes antes de escrever funcionalidades seja a pr√°tica mais adequada.
// O TDD √© muito importante como exerc√≠cio e para determinados tipos de projetos, mas
// est√° longe de ser um consenso na comunidade programadora como pr√°tica fundamental
// para 100% dos casos. √â importante que essa vis√£o cr√≠tica fique bem clara.
// Tendo isso em mente hoje voc√™ vai aprender e praticar o TDD, mas o conhecimento a ser
// absorvido √© "como testar bem uma aplica√ß√£o, de forma eficaz e produtiva" e "como ter
// um mindset orientado a testes", e n√£o especificamente como a metodologia funciona.
// Com muita pr√°tica e experi√™ncia, voc√™ ir√° desenvolver a intui√ß√£o necess√°ria para
// avaliar se o TDD √© a melhor abordagem para testar a sua aplica√ß√£o.
// Um exemplo interessante que o TDD pode ser bastante √∫til √© no teste de fun√ß√µes puras.
// O desenvolvimento orientado a testes √© um processo c√≠clico que pode ser
// descrito em tr√™s etapas, como ilustrado abaixo. O princ√≠pio b√°sico do TDD √© fazer
// testes pequenos.

// Destrinchando cada etapa, o TDD consiste em:
// Escrever um teste que cubra a fun√ß√£o que voc√™ pretende implementar
// antes mesmo de execut√°-la. Este teste ir√° falhar - afinal, a sua fun√ß√£o ainda
// n√£o foi declarada. Voc√™ pode come√ßar do teste mais elementar poss√≠vel para esse
// cen√°rio, como verificar se a fun√ß√£o que voc√™ ir√° criar existe:

const assert = require('assert');
assert.strictEqual(typeof myFunction, 'function');

// Implementar apenas o necess√°rio para que o teste passe. No caso do exemplo anterior,
// voc√™ s√≥ precisaria declarar a fun√ß√£o para passar o teste.
// Refatorar o c√≥digo para que ele esteja bem escrito e f√°cil de se entender.
// O pulo do gato nessa etapa √© que voc√™ tem um teste j√° implementado que ir√° falhar
// caso voc√™ quebre algo ao refatorar o seu c√≥digo.
// Repetir! Afinal de contas, o desenvolvimento orientado a testes √© um ciclo.
// Volte a etapa 1 e repita esse processo at√© que todas as funcionalidades da sua
// fun√ß√£o sejam implementadas.
// Al√©m de ser √∫til para testar fun√ß√µes puras, outro exemplo pr√°tico em que
// o desenvolvimento orientado a testes pode ser √∫til √© consertar bugs.
// Os testes ajudam a quebrar problemas complexos em partes menores que podem ser
// analisadas mais facilmente. Assim, voc√™ poder√° focar em uma regra de neg√≥cio
// espec√≠fica sem medo de quebrar alguma outra funcionalidade.
